# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/bigquery/datatransfer_v1/proto/datatransfer.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from google.api import annotations_pb2 as google_dot_api_dot_annotations__pb2
from google.cloud.bigquery_datatransfer_v1.proto import transfer_pb2 as google_dot_cloud_dot_bigquery_dot_datatransfer__v1_dot_proto_dot_transfer__pb2
from google.protobuf import duration_pb2 as google_dot_protobuf_dot_duration__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
from google.protobuf import field_mask_pb2 as google_dot_protobuf_dot_field__mask__pb2
from google.protobuf import timestamp_pb2 as google_dot_protobuf_dot_timestamp__pb2
from google.protobuf import wrappers_pb2 as google_dot_protobuf_dot_wrappers__pb2


DESCRIPTOR = _descriptor.FileDescriptor(
  name='google/cloud/bigquery/datatransfer_v1/proto/datatransfer.proto',
  package='google.cloud.bigquery.datatransfer.v1',
  syntax='proto3',
  serialized_pb=_b('\n>google/cloud/bigquery/datatransfer_v1/proto/datatransfer.proto\x12%google.cloud.bigquery.datatransfer.v1\x1a\x1cgoogle/api/annotations.proto\x1a:google/cloud/bigquery/datatransfer_v1/proto/transfer.proto\x1a\x1egoogle/protobuf/duration.proto\x1a\x1bgoogle/protobuf/empty.proto\x1a google/protobuf/field_mask.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x1egoogle/protobuf/wrappers.proto\"\xf1\x04\n\x13\x44\x61taSourceParameter\x12\x10\n\x08param_id\x18\x01 \x01(\t\x12\x14\n\x0c\x64isplay_name\x18\x02 \x01(\t\x12\x13\n\x0b\x64\x65scription\x18\x03 \x01(\t\x12M\n\x04type\x18\x04 \x01(\x0e\x32?.google.cloud.bigquery.datatransfer.v1.DataSourceParameter.Type\x12\x10\n\x08required\x18\x05 \x01(\x08\x12\x10\n\x08repeated\x18\x06 \x01(\x08\x12\x18\n\x10validation_regex\x18\x07 \x01(\t\x12\x16\n\x0e\x61llowed_values\x18\x08 \x03(\t\x12/\n\tmin_value\x18\t \x01(\x0b\x32\x1c.google.protobuf.DoubleValue\x12/\n\tmax_value\x18\n \x01(\x0b\x32\x1c.google.protobuf.DoubleValue\x12J\n\x06\x66ields\x18\x0b \x03(\x0b\x32:.google.cloud.bigquery.datatransfer.v1.DataSourceParameter\x12\x1e\n\x16validation_description\x18\x0c \x01(\t\x12\x1b\n\x13validation_help_url\x18\r \x01(\t\x12\x11\n\timmutable\x18\x0e \x01(\x08\x12\x0f\n\x07recurse\x18\x0f \x01(\x08\"i\n\x04Type\x12\x14\n\x10TYPE_UNSPECIFIED\x10\x00\x12\n\n\x06STRING\x10\x01\x12\x0b\n\x07INTEGER\x10\x02\x12\n\n\x06\x44OUBLE\x10\x03\x12\x0b\n\x07\x42OOLEAN\x10\x04\x12\n\n\x06RECORD\x10\x05\x12\r\n\tPLUS_PAGE\x10\x06\"\xcf\x07\n\nDataSource\x12\x0c\n\x04name\x18\x01 \x01(\t\x12\x16\n\x0e\x64\x61ta_source_id\x18\x02 \x01(\t\x12\x14\n\x0c\x64isplay_name\x18\x03 \x01(\t\x12\x13\n\x0b\x64\x65scription\x18\x04 \x01(\t\x12\x11\n\tclient_id\x18\x05 \x01(\t\x12\x0e\n\x06scopes\x18\x06 \x03(\t\x12J\n\rtransfer_type\x18\x07 \x01(\x0e\x32\x33.google.cloud.bigquery.datatransfer.v1.TransferType\x12#\n\x1bsupports_multiple_transfers\x18\x08 \x01(\x08\x12\x1f\n\x17update_deadline_seconds\x18\t \x01(\x05\x12\x18\n\x10\x64\x65\x66\x61ult_schedule\x18\n \x01(\t\x12 \n\x18supports_custom_schedule\x18\x0b \x01(\x08\x12N\n\nparameters\x18\x0c \x03(\x0b\x32:.google.cloud.bigquery.datatransfer.v1.DataSourceParameter\x12\x10\n\x08help_url\x18\r \x01(\t\x12_\n\x12\x61uthorization_type\x18\x0e \x01(\x0e\x32\x43.google.cloud.bigquery.datatransfer.v1.DataSource.AuthorizationType\x12\\\n\x11\x64\x61ta_refresh_type\x18\x0f \x01(\x0e\x32\x41.google.cloud.bigquery.datatransfer.v1.DataSource.DataRefreshType\x12(\n default_data_refresh_window_days\x18\x10 \x01(\x05\x12\x1c\n\x14manual_runs_disabled\x18\x11 \x01(\x08\x12<\n\x19minimum_schedule_interval\x18\x12 \x01(\x0b\x32\x19.google.protobuf.Duration\"s\n\x11\x41uthorizationType\x12\"\n\x1e\x41UTHORIZATION_TYPE_UNSPECIFIED\x10\x00\x12\x16\n\x12\x41UTHORIZATION_CODE\x10\x01\x12\"\n\x1eGOOGLE_PLUS_AUTHORIZATION_CODE\x10\x02\"c\n\x0f\x44\x61taRefreshType\x12!\n\x1d\x44\x41TA_REFRESH_TYPE_UNSPECIFIED\x10\x00\x12\x12\n\x0eSLIDING_WINDOW\x10\x01\x12\x19\n\x15\x43USTOM_SLIDING_WINDOW\x10\x02\"$\n\x14GetDataSourceRequest\x12\x0c\n\x04name\x18\x01 \x01(\t\"O\n\x16ListDataSourcesRequest\x12\x0e\n\x06parent\x18\x01 \x01(\t\x12\x12\n\npage_token\x18\x03 \x01(\t\x12\x11\n\tpage_size\x18\x04 \x01(\x05\"{\n\x17ListDataSourcesResponse\x12G\n\x0c\x64\x61ta_sources\x18\x01 \x03(\x0b\x32\x31.google.cloud.bigquery.datatransfer.v1.DataSource\x12\x17\n\x0fnext_page_token\x18\x02 \x01(\t\"\x99\x01\n\x1b\x43reateTransferConfigRequest\x12\x0e\n\x06parent\x18\x01 \x01(\t\x12N\n\x0ftransfer_config\x18\x02 \x01(\x0b\x32\x35.google.cloud.bigquery.datatransfer.v1.TransferConfig\x12\x1a\n\x12\x61uthorization_code\x18\x03 \x01(\t\"\xba\x01\n\x1bUpdateTransferConfigRequest\x12N\n\x0ftransfer_config\x18\x01 \x01(\x0b\x32\x35.google.cloud.bigquery.datatransfer.v1.TransferConfig\x12\x1a\n\x12\x61uthorization_code\x18\x03 \x01(\t\x12/\n\x0bupdate_mask\x18\x04 \x01(\x0b\x32\x1a.google.protobuf.FieldMask\"(\n\x18GetTransferConfigRequest\x12\x0c\n\x04name\x18\x01 \x01(\t\"+\n\x1b\x44\x65leteTransferConfigRequest\x12\x0c\n\x04name\x18\x01 \x01(\t\"%\n\x15GetTransferRunRequest\x12\x0c\n\x04name\x18\x01 \x01(\t\"(\n\x18\x44\x65leteTransferRunRequest\x12\x0c\n\x04name\x18\x01 \x01(\t\"l\n\x1aListTransferConfigsRequest\x12\x0e\n\x06parent\x18\x01 \x01(\t\x12\x17\n\x0f\x64\x61ta_source_ids\x18\x02 \x03(\t\x12\x12\n\npage_token\x18\x03 \x01(\t\x12\x11\n\tpage_size\x18\x04 \x01(\x05\"\x87\x01\n\x1bListTransferConfigsResponse\x12O\n\x10transfer_configs\x18\x01 \x03(\x0b\x32\x35.google.cloud.bigquery.datatransfer.v1.TransferConfig\x12\x17\n\x0fnext_page_token\x18\x02 \x01(\t\"\xad\x02\n\x17ListTransferRunsRequest\x12\x0e\n\x06parent\x18\x01 \x01(\t\x12\x44\n\x06states\x18\x02 \x03(\x0e\x32\x34.google.cloud.bigquery.datatransfer.v1.TransferState\x12\x12\n\npage_token\x18\x03 \x01(\t\x12\x11\n\tpage_size\x18\x04 \x01(\x05\x12^\n\x0brun_attempt\x18\x05 \x01(\x0e\x32I.google.cloud.bigquery.datatransfer.v1.ListTransferRunsRequest.RunAttempt\"5\n\nRunAttempt\x12\x1b\n\x17RUN_ATTEMPT_UNSPECIFIED\x10\x00\x12\n\n\x06LATEST\x10\x01\"~\n\x18ListTransferRunsResponse\x12I\n\rtransfer_runs\x18\x01 \x03(\x0b\x32\x32.google.cloud.bigquery.datatransfer.v1.TransferRun\x12\x17\n\x0fnext_page_token\x18\x02 \x01(\t\"\xaf\x01\n\x17ListTransferLogsRequest\x12\x0e\n\x06parent\x18\x01 \x01(\t\x12\x12\n\npage_token\x18\x04 \x01(\t\x12\x11\n\tpage_size\x18\x05 \x01(\x05\x12]\n\rmessage_types\x18\x06 \x03(\x0e\x32\x46.google.cloud.bigquery.datatransfer.v1.TransferMessage.MessageSeverity\"\x86\x01\n\x18ListTransferLogsResponse\x12Q\n\x11transfer_messages\x18\x01 \x03(\x0b\x32\x36.google.cloud.bigquery.datatransfer.v1.TransferMessage\x12\x17\n\x0fnext_page_token\x18\x02 \x01(\t\"&\n\x16\x43heckValidCredsRequest\x12\x0c\n\x04name\x18\x01 \x01(\t\"2\n\x17\x43heckValidCredsResponse\x12\x17\n\x0fhas_valid_creds\x18\x01 \x01(\x08\"\x8b\x01\n\x1bScheduleTransferRunsRequest\x12\x0e\n\x06parent\x18\x01 \x01(\t\x12.\n\nstart_time\x18\x02 \x01(\x0b\x32\x1a.google.protobuf.Timestamp\x12,\n\x08\x65nd_time\x18\x03 \x01(\x0b\x32\x1a.google.protobuf.Timestamp\"`\n\x1cScheduleTransferRunsResponse\x12@\n\x04runs\x18\x01 \x03(\x0b\x32\x32.google.cloud.bigquery.datatransfer.v1.TransferRun2\xd8\x15\n\x13\x44\x61taTransferService\x12\xb8\x01\n\rGetDataSource\x12;.google.cloud.bigquery.datatransfer.v1.GetDataSourceRequest\x1a\x31.google.cloud.bigquery.datatransfer.v1.DataSource\"7\x82\xd3\xe4\x93\x02\x31\x12//v1/{name=projects/*/locations/*/dataSources/*}\x12\xc9\x01\n\x0fListDataSources\x12=.google.cloud.bigquery.datatransfer.v1.ListDataSourcesRequest\x1a>.google.cloud.bigquery.datatransfer.v1.ListDataSourcesResponse\"7\x82\xd3\xe4\x93\x02\x31\x12//v1/{parent=projects/*/locations/*}/dataSources\x12\xdf\x01\n\x14\x43reateTransferConfig\x12\x42.google.cloud.bigquery.datatransfer.v1.CreateTransferConfigRequest\x1a\x35.google.cloud.bigquery.datatransfer.v1.TransferConfig\"L\x82\xd3\xe4\x93\x02\x46\"3/v1/{parent=projects/*/locations/*}/transferConfigs:\x0ftransfer_config\x12\xef\x01\n\x14UpdateTransferConfig\x12\x42.google.cloud.bigquery.datatransfer.v1.UpdateTransferConfigRequest\x1a\x35.google.cloud.bigquery.datatransfer.v1.TransferConfig\"\\\x82\xd3\xe4\x93\x02V2C/v1/{transfer_config.name=projects/*/locations/*/transferConfigs/*}:\x0ftransfer_config\x12\xaf\x01\n\x14\x44\x65leteTransferConfig\x12\x42.google.cloud.bigquery.datatransfer.v1.DeleteTransferConfigRequest\x1a\x16.google.protobuf.Empty\";\x82\xd3\xe4\x93\x02\x35*3/v1/{name=projects/*/locations/*/transferConfigs/*}\x12\xc8\x01\n\x11GetTransferConfig\x12?.google.cloud.bigquery.datatransfer.v1.GetTransferConfigRequest\x1a\x35.google.cloud.bigquery.datatransfer.v1.TransferConfig\";\x82\xd3\xe4\x93\x02\x35\x12\x33/v1/{name=projects/*/locations/*/transferConfigs/*}\x12\xd9\x01\n\x13ListTransferConfigs\x12\x41.google.cloud.bigquery.datatransfer.v1.ListTransferConfigsRequest\x1a\x42.google.cloud.bigquery.datatransfer.v1.ListTransferConfigsResponse\";\x82\xd3\xe4\x93\x02\x35\x12\x33/v1/{parent=projects/*/locations/*}/transferConfigs\x12\xee\x01\n\x14ScheduleTransferRuns\x12\x42.google.cloud.bigquery.datatransfer.v1.ScheduleTransferRunsRequest\x1a\x43.google.cloud.bigquery.datatransfer.v1.ScheduleTransferRunsResponse\"M\x82\xd3\xe4\x93\x02G\"B/v1/{parent=projects/*/locations/*/transferConfigs/*}:scheduleRuns:\x01*\x12\xc6\x01\n\x0eGetTransferRun\x12<.google.cloud.bigquery.datatransfer.v1.GetTransferRunRequest\x1a\x32.google.cloud.bigquery.datatransfer.v1.TransferRun\"B\x82\xd3\xe4\x93\x02<\x12:/v1/{name=projects/*/locations/*/transferConfigs/*/runs/*}\x12\xb0\x01\n\x11\x44\x65leteTransferRun\x12?.google.cloud.bigquery.datatransfer.v1.DeleteTransferRunRequest\x1a\x16.google.protobuf.Empty\"B\x82\xd3\xe4\x93\x02<*:/v1/{name=projects/*/locations/*/transferConfigs/*/runs/*}\x12\xd7\x01\n\x10ListTransferRuns\x12>.google.cloud.bigquery.datatransfer.v1.ListTransferRunsRequest\x1a?.google.cloud.bigquery.datatransfer.v1.ListTransferRunsResponse\"B\x82\xd3\xe4\x93\x02<\x12:/v1/{parent=projects/*/locations/*/transferConfigs/*}/runs\x12\xe6\x01\n\x10ListTransferLogs\x12>.google.cloud.bigquery.datatransfer.v1.ListTransferLogsRequest\x1a?.google.cloud.bigquery.datatransfer.v1.ListTransferLogsResponse\"Q\x82\xd3\xe4\x93\x02K\x12I/v1/{parent=projects/*/locations/*/transferConfigs/*/runs/*}/transferLogs\x12\xdc\x01\n\x0f\x43heckValidCreds\x12=.google.cloud.bigquery.datatransfer.v1.CheckValidCredsRequest\x1a>.google.cloud.bigquery.datatransfer.v1.CheckValidCredsResponse\"J\x82\xd3\xe4\x93\x02\x44\"?/v1/{name=projects/*/locations/*/dataSources/*}:checkValidCreds:\x01*B\xe3\x01\n)com.google.cloud.bigquery.datatransfer.v1B\x11\x44\x61taTransferProtoP\x01ZQgoogle.golang.org/genproto/googleapis/cloud/bigquery/datatransfer/v1;datatransfer\xaa\x02%Google.Cloud.BigQuery.DataTransfer.V1\xca\x02%Google\\Cloud\\BigQuery\\DataTransfer\\V1b\x06proto3')
  ,
  dependencies=[google_dot_api_dot_annotations__pb2.DESCRIPTOR,google_dot_cloud_dot_bigquery_dot_datatransfer__v1_dot_proto_dot_transfer__pb2.DESCRIPTOR,google_dot_protobuf_dot_duration__pb2.DESCRIPTOR,google_dot_protobuf_dot_empty__pb2.DESCRIPTOR,google_dot_protobuf_dot_field__mask__pb2.DESCRIPTOR,google_dot_protobuf_dot_timestamp__pb2.DESCRIPTOR,google_dot_protobuf_dot_wrappers__pb2.DESCRIPTOR,])
_sym_db.RegisterFileDescriptor(DESCRIPTOR)



_DATASOURCEPARAMETER_TYPE = _descriptor.EnumDescriptor(
  name='Type',
  full_name='google.cloud.bigquery.datatransfer.v1.DataSourceParameter.Type',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='TYPE_UNSPECIFIED', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='STRING', index=1, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='INTEGER', index=2, number=2,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='DOUBLE', index=3, number=3,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='BOOLEAN', index=4, number=4,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='RECORD', index=5, number=5,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='PLUS_PAGE', index=6, number=6,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=876,
  serialized_end=981,
)
_sym_db.RegisterEnumDescriptor(_DATASOURCEPARAMETER_TYPE)

_DATASOURCE_AUTHORIZATIONTYPE = _descriptor.EnumDescriptor(
  name='AuthorizationType',
  full_name='google.cloud.bigquery.datatransfer.v1.DataSource.AuthorizationType',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='AUTHORIZATION_TYPE_UNSPECIFIED', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='AUTHORIZATION_CODE', index=1, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='GOOGLE_PLUS_AUTHORIZATION_CODE', index=2, number=2,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=1743,
  serialized_end=1858,
)
_sym_db.RegisterEnumDescriptor(_DATASOURCE_AUTHORIZATIONTYPE)

_DATASOURCE_DATAREFRESHTYPE = _descriptor.EnumDescriptor(
  name='DataRefreshType',
  full_name='google.cloud.bigquery.datatransfer.v1.DataSource.DataRefreshType',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='DATA_REFRESH_TYPE_UNSPECIFIED', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='SLIDING_WINDOW', index=1, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='CUSTOM_SLIDING_WINDOW', index=2, number=2,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=1860,
  serialized_end=1959,
)
_sym_db.RegisterEnumDescriptor(_DATASOURCE_DATAREFRESHTYPE)

_LISTTRANSFERRUNSREQUEST_RUNATTEMPT = _descriptor.EnumDescriptor(
  name='RunAttempt',
  full_name='google.cloud.bigquery.datatransfer.v1.ListTransferRunsRequest.RunAttempt',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='RUN_ATTEMPT_UNSPECIFIED', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='LATEST', index=1, number=1,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=3215,
  serialized_end=3268,
)
_sym_db.RegisterEnumDescriptor(_LISTTRANSFERRUNSREQUEST_RUNATTEMPT)


_DATASOURCEPARAMETER = _descriptor.Descriptor(
  name='DataSourceParameter',
  full_name='google.cloud.bigquery.datatransfer.v1.DataSourceParameter',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='param_id', full_name='google.cloud.bigquery.datatransfer.v1.DataSourceParameter.param_id', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='display_name', full_name='google.cloud.bigquery.datatransfer.v1.DataSourceParameter.display_name', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='description', full_name='google.cloud.bigquery.datatransfer.v1.DataSourceParameter.description', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='type', full_name='google.cloud.bigquery.datatransfer.v1.DataSourceParameter.type', index=3,
      number=4, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='required', full_name='google.cloud.bigquery.datatransfer.v1.DataSourceParameter.required', index=4,
      number=5, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='repeated', full_name='google.cloud.bigquery.datatransfer.v1.DataSourceParameter.repeated', index=5,
      number=6, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='validation_regex', full_name='google.cloud.bigquery.datatransfer.v1.DataSourceParameter.validation_regex', index=6,
      number=7, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='allowed_values', full_name='google.cloud.bigquery.datatransfer.v1.DataSourceParameter.allowed_values', index=7,
      number=8, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='min_value', full_name='google.cloud.bigquery.datatransfer.v1.DataSourceParameter.min_value', index=8,
      number=9, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='max_value', full_name='google.cloud.bigquery.datatransfer.v1.DataSourceParameter.max_value', index=9,
      number=10, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='fields', full_name='google.cloud.bigquery.datatransfer.v1.DataSourceParameter.fields', index=10,
      number=11, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='validation_description', full_name='google.cloud.bigquery.datatransfer.v1.DataSourceParameter.validation_description', index=11,
      number=12, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='validation_help_url', full_name='google.cloud.bigquery.datatransfer.v1.DataSourceParameter.validation_help_url', index=12,
      number=13, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='immutable', full_name='google.cloud.bigquery.datatransfer.v1.DataSourceParameter.immutable', index=13,
      number=14, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='recurse', full_name='google.cloud.bigquery.datatransfer.v1.DataSourceParameter.recurse', index=14,
      number=15, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
    _DATASOURCEPARAMETER_TYPE,
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=356,
  serialized_end=981,
)


_DATASOURCE = _descriptor.Descriptor(
  name='DataSource',
  full_name='google.cloud.bigquery.datatransfer.v1.DataSource',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='name', full_name='google.cloud.bigquery.datatransfer.v1.DataSource.name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='data_source_id', full_name='google.cloud.bigquery.datatransfer.v1.DataSource.data_source_id', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='display_name', full_name='google.cloud.bigquery.datatransfer.v1.DataSource.display_name', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='description', full_name='google.cloud.bigquery.datatransfer.v1.DataSource.description', index=3,
      number=4, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='client_id', full_name='google.cloud.bigquery.datatransfer.v1.DataSource.client_id', index=4,
      number=5, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='scopes', full_name='google.cloud.bigquery.datatransfer.v1.DataSource.scopes', index=5,
      number=6, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='transfer_type', full_name='google.cloud.bigquery.datatransfer.v1.DataSource.transfer_type', index=6,
      number=7, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='supports_multiple_transfers', full_name='google.cloud.bigquery.datatransfer.v1.DataSource.supports_multiple_transfers', index=7,
      number=8, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='update_deadline_seconds', full_name='google.cloud.bigquery.datatransfer.v1.DataSource.update_deadline_seconds', index=8,
      number=9, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='default_schedule', full_name='google.cloud.bigquery.datatransfer.v1.DataSource.default_schedule', index=9,
      number=10, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='supports_custom_schedule', full_name='google.cloud.bigquery.datatransfer.v1.DataSource.supports_custom_schedule', index=10,
      number=11, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='parameters', full_name='google.cloud.bigquery.datatransfer.v1.DataSource.parameters', index=11,
      number=12, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='help_url', full_name='google.cloud.bigquery.datatransfer.v1.DataSource.help_url', index=12,
      number=13, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='authorization_type', full_name='google.cloud.bigquery.datatransfer.v1.DataSource.authorization_type', index=13,
      number=14, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='data_refresh_type', full_name='google.cloud.bigquery.datatransfer.v1.DataSource.data_refresh_type', index=14,
      number=15, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='default_data_refresh_window_days', full_name='google.cloud.bigquery.datatransfer.v1.DataSource.default_data_refresh_window_days', index=15,
      number=16, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='manual_runs_disabled', full_name='google.cloud.bigquery.datatransfer.v1.DataSource.manual_runs_disabled', index=16,
      number=17, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='minimum_schedule_interval', full_name='google.cloud.bigquery.datatransfer.v1.DataSource.minimum_schedule_interval', index=17,
      number=18, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
    _DATASOURCE_AUTHORIZATIONTYPE,
    _DATASOURCE_DATAREFRESHTYPE,
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=984,
  serialized_end=1959,
)


_GETDATASOURCEREQUEST = _descriptor.Descriptor(
  name='GetDataSourceRequest',
  full_name='google.cloud.bigquery.datatransfer.v1.GetDataSourceRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='name', full_name='google.cloud.bigquery.datatransfer.v1.GetDataSourceRequest.name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1961,
  serialized_end=1997,
)


_LISTDATASOURCESREQUEST = _descriptor.Descriptor(
  name='ListDataSourcesRequest',
  full_name='google.cloud.bigquery.datatransfer.v1.ListDataSourcesRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='parent', full_name='google.cloud.bigquery.datatransfer.v1.ListDataSourcesRequest.parent', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='page_token', full_name='google.cloud.bigquery.datatransfer.v1.ListDataSourcesRequest.page_token', index=1,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='page_size', full_name='google.cloud.bigquery.datatransfer.v1.ListDataSourcesRequest.page_size', index=2,
      number=4, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1999,
  serialized_end=2078,
)


_LISTDATASOURCESRESPONSE = _descriptor.Descriptor(
  name='ListDataSourcesResponse',
  full_name='google.cloud.bigquery.datatransfer.v1.ListDataSourcesResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='data_sources', full_name='google.cloud.bigquery.datatransfer.v1.ListDataSourcesResponse.data_sources', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='next_page_token', full_name='google.cloud.bigquery.datatransfer.v1.ListDataSourcesResponse.next_page_token', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2080,
  serialized_end=2203,
)


_CREATETRANSFERCONFIGREQUEST = _descriptor.Descriptor(
  name='CreateTransferConfigRequest',
  full_name='google.cloud.bigquery.datatransfer.v1.CreateTransferConfigRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='parent', full_name='google.cloud.bigquery.datatransfer.v1.CreateTransferConfigRequest.parent', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='transfer_config', full_name='google.cloud.bigquery.datatransfer.v1.CreateTransferConfigRequest.transfer_config', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='authorization_code', full_name='google.cloud.bigquery.datatransfer.v1.CreateTransferConfigRequest.authorization_code', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2206,
  serialized_end=2359,
)


_UPDATETRANSFERCONFIGREQUEST = _descriptor.Descriptor(
  name='UpdateTransferConfigRequest',
  full_name='google.cloud.bigquery.datatransfer.v1.UpdateTransferConfigRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='transfer_config', full_name='google.cloud.bigquery.datatransfer.v1.UpdateTransferConfigRequest.transfer_config', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='authorization_code', full_name='google.cloud.bigquery.datatransfer.v1.UpdateTransferConfigRequest.authorization_code', index=1,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='update_mask', full_name='google.cloud.bigquery.datatransfer.v1.UpdateTransferConfigRequest.update_mask', index=2,
      number=4, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2362,
  serialized_end=2548,
)


_GETTRANSFERCONFIGREQUEST = _descriptor.Descriptor(
  name='GetTransferConfigRequest',
  full_name='google.cloud.bigquery.datatransfer.v1.GetTransferConfigRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='name', full_name='google.cloud.bigquery.datatransfer.v1.GetTransferConfigRequest.name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2550,
  serialized_end=2590,
)


_DELETETRANSFERCONFIGREQUEST = _descriptor.Descriptor(
  name='DeleteTransferConfigRequest',
  full_name='google.cloud.bigquery.datatransfer.v1.DeleteTransferConfigRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='name', full_name='google.cloud.bigquery.datatransfer.v1.DeleteTransferConfigRequest.name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2592,
  serialized_end=2635,
)


_GETTRANSFERRUNREQUEST = _descriptor.Descriptor(
  name='GetTransferRunRequest',
  full_name='google.cloud.bigquery.datatransfer.v1.GetTransferRunRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='name', full_name='google.cloud.bigquery.datatransfer.v1.GetTransferRunRequest.name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2637,
  serialized_end=2674,
)


_DELETETRANSFERRUNREQUEST = _descriptor.Descriptor(
  name='DeleteTransferRunRequest',
  full_name='google.cloud.bigquery.datatransfer.v1.DeleteTransferRunRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='name', full_name='google.cloud.bigquery.datatransfer.v1.DeleteTransferRunRequest.name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2676,
  serialized_end=2716,
)


_LISTTRANSFERCONFIGSREQUEST = _descriptor.Descriptor(
  name='ListTransferConfigsRequest',
  full_name='google.cloud.bigquery.datatransfer.v1.ListTransferConfigsRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='parent', full_name='google.cloud.bigquery.datatransfer.v1.ListTransferConfigsRequest.parent', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='data_source_ids', full_name='google.cloud.bigquery.datatransfer.v1.ListTransferConfigsRequest.data_source_ids', index=1,
      number=2, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='page_token', full_name='google.cloud.bigquery.datatransfer.v1.ListTransferConfigsRequest.page_token', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='page_size', full_name='google.cloud.bigquery.datatransfer.v1.ListTransferConfigsRequest.page_size', index=3,
      number=4, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2718,
  serialized_end=2826,
)


_LISTTRANSFERCONFIGSRESPONSE = _descriptor.Descriptor(
  name='ListTransferConfigsResponse',
  full_name='google.cloud.bigquery.datatransfer.v1.ListTransferConfigsResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='transfer_configs', full_name='google.cloud.bigquery.datatransfer.v1.ListTransferConfigsResponse.transfer_configs', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='next_page_token', full_name='google.cloud.bigquery.datatransfer.v1.ListTransferConfigsResponse.next_page_token', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2829,
  serialized_end=2964,
)


_LISTTRANSFERRUNSREQUEST = _descriptor.Descriptor(
  name='ListTransferRunsRequest',
  full_name='google.cloud.bigquery.datatransfer.v1.ListTransferRunsRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='parent', full_name='google.cloud.bigquery.datatransfer.v1.ListTransferRunsRequest.parent', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='states', full_name='google.cloud.bigquery.datatransfer.v1.ListTransferRunsRequest.states', index=1,
      number=2, type=14, cpp_type=8, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='page_token', full_name='google.cloud.bigquery.datatransfer.v1.ListTransferRunsRequest.page_token', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='page_size', full_name='google.cloud.bigquery.datatransfer.v1.ListTransferRunsRequest.page_size', index=3,
      number=4, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='run_attempt', full_name='google.cloud.bigquery.datatransfer.v1.ListTransferRunsRequest.run_attempt', index=4,
      number=5, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
    _LISTTRANSFERRUNSREQUEST_RUNATTEMPT,
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2967,
  serialized_end=3268,
)


_LISTTRANSFERRUNSRESPONSE = _descriptor.Descriptor(
  name='ListTransferRunsResponse',
  full_name='google.cloud.bigquery.datatransfer.v1.ListTransferRunsResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='transfer_runs', full_name='google.cloud.bigquery.datatransfer.v1.ListTransferRunsResponse.transfer_runs', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='next_page_token', full_name='google.cloud.bigquery.datatransfer.v1.ListTransferRunsResponse.next_page_token', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=3270,
  serialized_end=3396,
)


_LISTTRANSFERLOGSREQUEST = _descriptor.Descriptor(
  name='ListTransferLogsRequest',
  full_name='google.cloud.bigquery.datatransfer.v1.ListTransferLogsRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='parent', full_name='google.cloud.bigquery.datatransfer.v1.ListTransferLogsRequest.parent', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='page_token', full_name='google.cloud.bigquery.datatransfer.v1.ListTransferLogsRequest.page_token', index=1,
      number=4, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='page_size', full_name='google.cloud.bigquery.datatransfer.v1.ListTransferLogsRequest.page_size', index=2,
      number=5, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='message_types', full_name='google.cloud.bigquery.datatransfer.v1.ListTransferLogsRequest.message_types', index=3,
      number=6, type=14, cpp_type=8, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=3399,
  serialized_end=3574,
)


_LISTTRANSFERLOGSRESPONSE = _descriptor.Descriptor(
  name='ListTransferLogsResponse',
  full_name='google.cloud.bigquery.datatransfer.v1.ListTransferLogsResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='transfer_messages', full_name='google.cloud.bigquery.datatransfer.v1.ListTransferLogsResponse.transfer_messages', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='next_page_token', full_name='google.cloud.bigquery.datatransfer.v1.ListTransferLogsResponse.next_page_token', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=3577,
  serialized_end=3711,
)


_CHECKVALIDCREDSREQUEST = _descriptor.Descriptor(
  name='CheckValidCredsRequest',
  full_name='google.cloud.bigquery.datatransfer.v1.CheckValidCredsRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='name', full_name='google.cloud.bigquery.datatransfer.v1.CheckValidCredsRequest.name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=3713,
  serialized_end=3751,
)


_CHECKVALIDCREDSRESPONSE = _descriptor.Descriptor(
  name='CheckValidCredsResponse',
  full_name='google.cloud.bigquery.datatransfer.v1.CheckValidCredsResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='has_valid_creds', full_name='google.cloud.bigquery.datatransfer.v1.CheckValidCredsResponse.has_valid_creds', index=0,
      number=1, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=3753,
  serialized_end=3803,
)


_SCHEDULETRANSFERRUNSREQUEST = _descriptor.Descriptor(
  name='ScheduleTransferRunsRequest',
  full_name='google.cloud.bigquery.datatransfer.v1.ScheduleTransferRunsRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='parent', full_name='google.cloud.bigquery.datatransfer.v1.ScheduleTransferRunsRequest.parent', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='start_time', full_name='google.cloud.bigquery.datatransfer.v1.ScheduleTransferRunsRequest.start_time', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='end_time', full_name='google.cloud.bigquery.datatransfer.v1.ScheduleTransferRunsRequest.end_time', index=2,
      number=3, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=3806,
  serialized_end=3945,
)


_SCHEDULETRANSFERRUNSRESPONSE = _descriptor.Descriptor(
  name='ScheduleTransferRunsResponse',
  full_name='google.cloud.bigquery.datatransfer.v1.ScheduleTransferRunsResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='runs', full_name='google.cloud.bigquery.datatransfer.v1.ScheduleTransferRunsResponse.runs', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=3947,
  serialized_end=4043,
)

_DATASOURCEPARAMETER.fields_by_name['type'].enum_type = _DATASOURCEPARAMETER_TYPE
_DATASOURCEPARAMETER.fields_by_name['min_value'].message_type = google_dot_protobuf_dot_wrappers__pb2._DOUBLEVALUE
_DATASOURCEPARAMETER.fields_by_name['max_value'].message_type = google_dot_protobuf_dot_wrappers__pb2._DOUBLEVALUE
_DATASOURCEPARAMETER.fields_by_name['fields'].message_type = _DATASOURCEPARAMETER
_DATASOURCEPARAMETER_TYPE.containing_type = _DATASOURCEPARAMETER
_DATASOURCE.fields_by_name['transfer_type'].enum_type = google_dot_cloud_dot_bigquery_dot_datatransfer__v1_dot_proto_dot_transfer__pb2._TRANSFERTYPE
_DATASOURCE.fields_by_name['parameters'].message_type = _DATASOURCEPARAMETER
_DATASOURCE.fields_by_name['authorization_type'].enum_type = _DATASOURCE_AUTHORIZATIONTYPE
_DATASOURCE.fields_by_name['data_refresh_type'].enum_type = _DATASOURCE_DATAREFRESHTYPE
_DATASOURCE.fields_by_name['minimum_schedule_interval'].message_type = google_dot_protobuf_dot_duration__pb2._DURATION
_DATASOURCE_AUTHORIZATIONTYPE.containing_type = _DATASOURCE
_DATASOURCE_DATAREFRESHTYPE.containing_type = _DATASOURCE
_LISTDATASOURCESRESPONSE.fields_by_name['data_sources'].message_type = _DATASOURCE
_CREATETRANSFERCONFIGREQUEST.fields_by_name['transfer_config'].message_type = google_dot_cloud_dot_bigquery_dot_datatransfer__v1_dot_proto_dot_transfer__pb2._TRANSFERCONFIG
_UPDATETRANSFERCONFIGREQUEST.fields_by_name['transfer_config'].message_type = google_dot_cloud_dot_bigquery_dot_datatransfer__v1_dot_proto_dot_transfer__pb2._TRANSFERCONFIG
_UPDATETRANSFERCONFIGREQUEST.fields_by_name['update_mask'].message_type = google_dot_protobuf_dot_field__mask__pb2._FIELDMASK
_LISTTRANSFERCONFIGSRESPONSE.fields_by_name['transfer_configs'].message_type = google_dot_cloud_dot_bigquery_dot_datatransfer__v1_dot_proto_dot_transfer__pb2._TRANSFERCONFIG
_LISTTRANSFERRUNSREQUEST.fields_by_name['states'].enum_type = google_dot_cloud_dot_bigquery_dot_datatransfer__v1_dot_proto_dot_transfer__pb2._TRANSFERSTATE
_LISTTRANSFERRUNSREQUEST.fields_by_name['run_attempt'].enum_type = _LISTTRANSFERRUNSREQUEST_RUNATTEMPT
_LISTTRANSFERRUNSREQUEST_RUNATTEMPT.containing_type = _LISTTRANSFERRUNSREQUEST
_LISTTRANSFERRUNSRESPONSE.fields_by_name['transfer_runs'].message_type = google_dot_cloud_dot_bigquery_dot_datatransfer__v1_dot_proto_dot_transfer__pb2._TRANSFERRUN
_LISTTRANSFERLOGSREQUEST.fields_by_name['message_types'].enum_type = google_dot_cloud_dot_bigquery_dot_datatransfer__v1_dot_proto_dot_transfer__pb2._TRANSFERMESSAGE_MESSAGESEVERITY
_LISTTRANSFERLOGSRESPONSE.fields_by_name['transfer_messages'].message_type = google_dot_cloud_dot_bigquery_dot_datatransfer__v1_dot_proto_dot_transfer__pb2._TRANSFERMESSAGE
_SCHEDULETRANSFERRUNSREQUEST.fields_by_name['start_time'].message_type = google_dot_protobuf_dot_timestamp__pb2._TIMESTAMP
_SCHEDULETRANSFERRUNSREQUEST.fields_by_name['end_time'].message_type = google_dot_protobuf_dot_timestamp__pb2._TIMESTAMP
_SCHEDULETRANSFERRUNSRESPONSE.fields_by_name['runs'].message_type = google_dot_cloud_dot_bigquery_dot_datatransfer__v1_dot_proto_dot_transfer__pb2._TRANSFERRUN
DESCRIPTOR.message_types_by_name['DataSourceParameter'] = _DATASOURCEPARAMETER
DESCRIPTOR.message_types_by_name['DataSource'] = _DATASOURCE
DESCRIPTOR.message_types_by_name['GetDataSourceRequest'] = _GETDATASOURCEREQUEST
DESCRIPTOR.message_types_by_name['ListDataSourcesRequest'] = _LISTDATASOURCESREQUEST
DESCRIPTOR.message_types_by_name['ListDataSourcesResponse'] = _LISTDATASOURCESRESPONSE
DESCRIPTOR.message_types_by_name['CreateTransferConfigRequest'] = _CREATETRANSFERCONFIGREQUEST
DESCRIPTOR.message_types_by_name['UpdateTransferConfigRequest'] = _UPDATETRANSFERCONFIGREQUEST
DESCRIPTOR.message_types_by_name['GetTransferConfigRequest'] = _GETTRANSFERCONFIGREQUEST
DESCRIPTOR.message_types_by_name['DeleteTransferConfigRequest'] = _DELETETRANSFERCONFIGREQUEST
DESCRIPTOR.message_types_by_name['GetTransferRunRequest'] = _GETTRANSFERRUNREQUEST
DESCRIPTOR.message_types_by_name['DeleteTransferRunRequest'] = _DELETETRANSFERRUNREQUEST
DESCRIPTOR.message_types_by_name['ListTransferConfigsRequest'] = _LISTTRANSFERCONFIGSREQUEST
DESCRIPTOR.message_types_by_name['ListTransferConfigsResponse'] = _LISTTRANSFERCONFIGSRESPONSE
DESCRIPTOR.message_types_by_name['ListTransferRunsRequest'] = _LISTTRANSFERRUNSREQUEST
DESCRIPTOR.message_types_by_name['ListTransferRunsResponse'] = _LISTTRANSFERRUNSRESPONSE
DESCRIPTOR.message_types_by_name['ListTransferLogsRequest'] = _LISTTRANSFERLOGSREQUEST
DESCRIPTOR.message_types_by_name['ListTransferLogsResponse'] = _LISTTRANSFERLOGSRESPONSE
DESCRIPTOR.message_types_by_name['CheckValidCredsRequest'] = _CHECKVALIDCREDSREQUEST
DESCRIPTOR.message_types_by_name['CheckValidCredsResponse'] = _CHECKVALIDCREDSRESPONSE
DESCRIPTOR.message_types_by_name['ScheduleTransferRunsRequest'] = _SCHEDULETRANSFERRUNSREQUEST
DESCRIPTOR.message_types_by_name['ScheduleTransferRunsResponse'] = _SCHEDULETRANSFERRUNSRESPONSE

DataSourceParameter = _reflection.GeneratedProtocolMessageType('DataSourceParameter', (_message.Message,), dict(
  DESCRIPTOR = _DATASOURCEPARAMETER,
  __module__ = 'google.cloud.bigquery.datatransfer_v1.proto.datatransfer_pb2'
  ,
  __doc__ = """Represents a data source parameter with validation rules, so that
  parameters can be rendered in the UI. These parameters are given to us
  by supported data sources, and include all needed information for
  rendering and validation. Thus, whoever uses this api can decide to
  generate either generic ui, or custom data source specific forms.


  Attributes:
      param_id:
          Parameter identifier.
      display_name:
          Parameter display name in the user interface.
      description:
          Parameter description.
      type:
          Parameter type.
      required:
          Is parameter required.
      repeated:
          Can parameter have multiple values.
      validation_regex:
          Regular expression which can be used for parameter validation.
      allowed_values:
          All possible values for the parameter.
      min_value:
          For integer and double values specifies minimum allowed value.
      max_value:
          For integer and double values specifies maxminum allowed
          value.
      fields:
          When parameter is a record, describes child fields.
      validation_description:
          Description of the requirements for this field, in case the
          user input does not fulfill the regex pattern or min/max
          values.
      validation_help_url:
          URL to a help document to further explain the naming
          requirements.
      immutable:
          Cannot be changed after initial creation.
      recurse:
          If set to true, schema should be taken from the parent with
          the same parameter\_id. Only applicable when parameter type is
          RECORD.
  """,
  # @@protoc_insertion_point(class_scope:google.cloud.bigquery.datatransfer.v1.DataSourceParameter)
  ))
_sym_db.RegisterMessage(DataSourceParameter)

DataSource = _reflection.GeneratedProtocolMessageType('DataSource', (_message.Message,), dict(
  DESCRIPTOR = _DATASOURCE,
  __module__ = 'google.cloud.bigquery.datatransfer_v1.proto.datatransfer_pb2'
  ,
  __doc__ = """Represents data source metadata. Metadata is sufficient to render UI and
  request proper OAuth tokens.


  Attributes:
      name:
          Data source resource name.
      data_source_id:
          Data source id.
      display_name:
          User friendly data source name.
      description:
          User friendly data source description string.
      client_id:
          Data source client id which should be used to receive refresh
          token. When not supplied, no offline credentials are populated
          for data transfer.
      scopes:
          Api auth scopes for which refresh token needs to be obtained.
          Only valid when ``client_id`` is specified. Ignored otherwise.
          These are scopes needed by a data source to prepare data and
          ingest them into BigQuery, e.g.,
          https://www.googleapis.com/auth/bigquery
      transfer_type:
          Transfer type. Currently supports only batch transfers, which
          are transfers that use the BigQuery batch APIs (load or query)
          to ingest the data.
      supports_multiple_transfers:
          Indicates whether the data source supports multiple transfers
          to different BigQuery targets.
      update_deadline_seconds:
          The number of seconds to wait for an update from the data
          source before BigQuery marks the transfer as failed.
      default_schedule:
          Default data transfer schedule. Examples of valid schedules
          include: ``1st,3rd monday of month 15:30``, ``every wed,fri of
          jan,jun 13:15``, and ``first sunday of quarter 00:00``.
      supports_custom_schedule:
          Specifies whether the data source supports a user defined
          schedule, or operates on the default schedule. When set to
          ``true``, user can override default schedule.
      parameters:
          Data source parameters.
      help_url:
          Url for the help document for this data source.
      authorization_type:
          Indicates the type of authorization.
      data_refresh_type:
          Specifies whether the data source supports automatic data
          refresh for the past few days, and how it's supported. For
          some data sources, data might not be complete until a few days
          later, so it's useful to refresh data automatically.
      default_data_refresh_window_days:
          Default data refresh window on days. Only meaningful when
          ``data_refresh_type`` = ``SLIDING_WINDOW``.
      manual_runs_disabled:
          Disables backfilling and manual run scheduling for the data
          source.
      minimum_schedule_interval:
          The minimum interval between two consecutive scheduled runs.
  """,
  # @@protoc_insertion_point(class_scope:google.cloud.bigquery.datatransfer.v1.DataSource)
  ))
_sym_db.RegisterMessage(DataSource)

GetDataSourceRequest = _reflection.GeneratedProtocolMessageType('GetDataSourceRequest', (_message.Message,), dict(
  DESCRIPTOR = _GETDATASOURCEREQUEST,
  __module__ = 'google.cloud.bigquery.datatransfer_v1.proto.datatransfer_pb2'
  ,
  __doc__ = """A request to get data source info.


  Attributes:
      name:
          The field will contain name of the resource requested, for
          example:
          ``projects/{project_id}/dataSources/{data_source_id}``
  """,
  # @@protoc_insertion_point(class_scope:google.cloud.bigquery.datatransfer.v1.GetDataSourceRequest)
  ))
_sym_db.RegisterMessage(GetDataSourceRequest)

ListDataSourcesRequest = _reflection.GeneratedProtocolMessageType('ListDataSourcesRequest', (_message.Message,), dict(
  DESCRIPTOR = _LISTDATASOURCESREQUEST,
  __module__ = 'google.cloud.bigquery.datatransfer_v1.proto.datatransfer_pb2'
  ,
  __doc__ = """Request to list supported data sources and their data transfer settings.


  Attributes:
      parent:
          The BigQuery project id for which data sources should be
          returned. Must be in the form: ``projects/{project_id}``
      page_token:
          Pagination token, which can be used to request a specific page
          of ``ListDataSourcesRequest`` list results. For multiple-page
          results, ``ListDataSourcesResponse`` outputs a ``next_page``
          token, which can be used as the ``page_token`` value to
          request the next page of list results.
      page_size:
          Page size. The default page size is the maximum value of 1000
          results.
  """,
  # @@protoc_insertion_point(class_scope:google.cloud.bigquery.datatransfer.v1.ListDataSourcesRequest)
  ))
_sym_db.RegisterMessage(ListDataSourcesRequest)

ListDataSourcesResponse = _reflection.GeneratedProtocolMessageType('ListDataSourcesResponse', (_message.Message,), dict(
  DESCRIPTOR = _LISTDATASOURCESRESPONSE,
  __module__ = 'google.cloud.bigquery.datatransfer_v1.proto.datatransfer_pb2'
  ,
  __doc__ = """Returns list of supported data sources and their metadata.


  Attributes:
      data_sources:
          List of supported data sources and their transfer settings.
      next_page_token:
          Output only. The next-pagination token. For multiple-page list
          results, this token can be used as the
          ``ListDataSourcesRequest.page_token`` to request the next page
          of list results.
  """,
  # @@protoc_insertion_point(class_scope:google.cloud.bigquery.datatransfer.v1.ListDataSourcesResponse)
  ))
_sym_db.RegisterMessage(ListDataSourcesResponse)

CreateTransferConfigRequest = _reflection.GeneratedProtocolMessageType('CreateTransferConfigRequest', (_message.Message,), dict(
  DESCRIPTOR = _CREATETRANSFERCONFIGREQUEST,
  __module__ = 'google.cloud.bigquery.datatransfer_v1.proto.datatransfer_pb2'
  ,
  __doc__ = """A request to create a data transfer configuration. If new credentials
  are needed for this transfer configuration, an authorization code must
  be provided. If an authorization code is provided, the transfer
  configuration will be associated with the user id corresponding to the
  authorization code. Otherwise, the transfer configuration will be
  associated with the calling user.


  Attributes:
      parent:
          The BigQuery project id where the transfer configuration
          should be created. Must be in the format
          /projects/{project\_id}/locations/{location\_id} or
          /projects/{project\_id}/locations/- In case when '-' is
          specified as location\_id, location is infered from the
          destination dataset region.
      transfer_config:
          Data transfer configuration to create.
      authorization_code:
          Optional OAuth2 authorization code to use with this transfer
          configuration. This is required if new credentials are needed,
          as indicated by ``CheckValidCreds``. In order to obtain
          authorization\_code, please make a request to https://www.gsta
          tic.com/bigquerydatatransfer/oauthz/auth?client\_id=&scope=&re
          direct\_uri=  -  client\_id should be OAuth client\_id of
          BigQuery DTS API for the    given data source returned by
          ListDataSources method. -  data\_source\_scopes are the scopes
          returned by ListDataSources    method. -  redirect\_uri is an
          optional parameter. If not specified, then    authorization
          code is posted to the opener of authorization flow    window.
          Otherwise it will be sent to the redirect uri. A special
          value of urn:ietf:wg:oauth:2.0:oob means that authorization
          code    should be returned in the title bar of the browser,
          with the page    text prompting the user to copy the code and
          paste it in the    application.
  """,
  # @@protoc_insertion_point(class_scope:google.cloud.bigquery.datatransfer.v1.CreateTransferConfigRequest)
  ))
_sym_db.RegisterMessage(CreateTransferConfigRequest)

UpdateTransferConfigRequest = _reflection.GeneratedProtocolMessageType('UpdateTransferConfigRequest', (_message.Message,), dict(
  DESCRIPTOR = _UPDATETRANSFERCONFIGREQUEST,
  __module__ = 'google.cloud.bigquery.datatransfer_v1.proto.datatransfer_pb2'
  ,
  __doc__ = """A request to update a transfer configuration. To update the user id of
  the transfer configuration, an authorization code needs to be provided.


  Attributes:
      transfer_config:
          Data transfer configuration to create.
      authorization_code:
          Optional OAuth2 authorization code to use with this transfer
          configuration. If it is provided, the transfer configuration
          will be associated with the authorizing user. In order to
          obtain authorization\_code, please make a request to https://w
          ww.gstatic.com/bigquerydatatransfer/oauthz/auth?client\_id=&sc
          ope=&redirect\_uri=  -  client\_id should be OAuth client\_id
          of BigQuery DTS API for the    given data source returned by
          ListDataSources method. -  data\_source\_scopes are the scopes
          returned by ListDataSources    method. -  redirect\_uri is an
          optional parameter. If not specified, then    authorization
          code is posted to the opener of authorization flow    window.
          Otherwise it will be sent to the redirect uri. A special
          value of urn:ietf:wg:oauth:2.0:oob means that authorization
          code    should be returned in the title bar of the browser,
          with the page    text prompting the user to copy the code and
          paste it in the    application.
      update_mask:
          Required list of fields to be updated in this request.
  """,
  # @@protoc_insertion_point(class_scope:google.cloud.bigquery.datatransfer.v1.UpdateTransferConfigRequest)
  ))
_sym_db.RegisterMessage(UpdateTransferConfigRequest)

GetTransferConfigRequest = _reflection.GeneratedProtocolMessageType('GetTransferConfigRequest', (_message.Message,), dict(
  DESCRIPTOR = _GETTRANSFERCONFIGREQUEST,
  __module__ = 'google.cloud.bigquery.datatransfer_v1.proto.datatransfer_pb2'
  ,
  __doc__ = """A request to get data transfer information.


  Attributes:
      name:
          The field will contain name of the resource requested, for
          example: ``projects/{project_id}/transferConfigs/{config_id}``
  """,
  # @@protoc_insertion_point(class_scope:google.cloud.bigquery.datatransfer.v1.GetTransferConfigRequest)
  ))
_sym_db.RegisterMessage(GetTransferConfigRequest)

DeleteTransferConfigRequest = _reflection.GeneratedProtocolMessageType('DeleteTransferConfigRequest', (_message.Message,), dict(
  DESCRIPTOR = _DELETETRANSFERCONFIGREQUEST,
  __module__ = 'google.cloud.bigquery.datatransfer_v1.proto.datatransfer_pb2'
  ,
  __doc__ = """A request to delete data transfer information. All associated transfer
  runs and log messages will be deleted as well.


  Attributes:
      name:
          The field will contain name of the resource requested, for
          example: ``projects/{project_id}/transferConfigs/{config_id}``
  """,
  # @@protoc_insertion_point(class_scope:google.cloud.bigquery.datatransfer.v1.DeleteTransferConfigRequest)
  ))
_sym_db.RegisterMessage(DeleteTransferConfigRequest)

GetTransferRunRequest = _reflection.GeneratedProtocolMessageType('GetTransferRunRequest', (_message.Message,), dict(
  DESCRIPTOR = _GETTRANSFERRUNREQUEST,
  __module__ = 'google.cloud.bigquery.datatransfer_v1.proto.datatransfer_pb2'
  ,
  __doc__ = """A request to get data transfer run information.


  Attributes:
      name:
          The field will contain name of the resource requested, for
          example: ``projects/{project_id}/transferConfigs/{config_id}/r
          uns/{run_id}``
  """,
  # @@protoc_insertion_point(class_scope:google.cloud.bigquery.datatransfer.v1.GetTransferRunRequest)
  ))
_sym_db.RegisterMessage(GetTransferRunRequest)

DeleteTransferRunRequest = _reflection.GeneratedProtocolMessageType('DeleteTransferRunRequest', (_message.Message,), dict(
  DESCRIPTOR = _DELETETRANSFERRUNREQUEST,
  __module__ = 'google.cloud.bigquery.datatransfer_v1.proto.datatransfer_pb2'
  ,
  __doc__ = """A request to delete data transfer run information.


  Attributes:
      name:
          The field will contain name of the resource requested, for
          example: ``projects/{project_id}/transferConfigs/{config_id}/r
          uns/{run_id}``
  """,
  # @@protoc_insertion_point(class_scope:google.cloud.bigquery.datatransfer.v1.DeleteTransferRunRequest)
  ))
_sym_db.RegisterMessage(DeleteTransferRunRequest)

ListTransferConfigsRequest = _reflection.GeneratedProtocolMessageType('ListTransferConfigsRequest', (_message.Message,), dict(
  DESCRIPTOR = _LISTTRANSFERCONFIGSREQUEST,
  __module__ = 'google.cloud.bigquery.datatransfer_v1.proto.datatransfer_pb2'
  ,
  __doc__ = """A request to list data transfers configured for a BigQuery project.


  Attributes:
      parent:
          The BigQuery project id for which data sources should be
          returned: ``projects/{project_id}``.
      data_source_ids:
          When specified, only configurations of requested data sources
          are returned.
      page_token:
          Pagination token, which can be used to request a specific page
          of ``ListTransfersRequest`` list results. For multiple-page
          results, ``ListTransfersResponse`` outputs a ``next_page``
          token, which can be used as the ``page_token`` value to
          request the next page of list results.
      page_size:
          Page size. The default page size is the maximum value of 1000
          results.
  """,
  # @@protoc_insertion_point(class_scope:google.cloud.bigquery.datatransfer.v1.ListTransferConfigsRequest)
  ))
_sym_db.RegisterMessage(ListTransferConfigsRequest)

ListTransferConfigsResponse = _reflection.GeneratedProtocolMessageType('ListTransferConfigsResponse', (_message.Message,), dict(
  DESCRIPTOR = _LISTTRANSFERCONFIGSRESPONSE,
  __module__ = 'google.cloud.bigquery.datatransfer_v1.proto.datatransfer_pb2'
  ,
  __doc__ = """The returned list of pipelines in the project.


  Attributes:
      transfer_configs:
          Output only. The stored pipeline transfer configurations.
      next_page_token:
          Output only. The next-pagination token. For multiple-page list
          results, this token can be used as the
          ``ListTransferConfigsRequest.page_token`` to request the next
          page of list results.
  """,
  # @@protoc_insertion_point(class_scope:google.cloud.bigquery.datatransfer.v1.ListTransferConfigsResponse)
  ))
_sym_db.RegisterMessage(ListTransferConfigsResponse)

ListTransferRunsRequest = _reflection.GeneratedProtocolMessageType('ListTransferRunsRequest', (_message.Message,), dict(
  DESCRIPTOR = _LISTTRANSFERRUNSREQUEST,
  __module__ = 'google.cloud.bigquery.datatransfer_v1.proto.datatransfer_pb2'
  ,
  __doc__ = """A request to list data transfer runs. UI can use this method to
  show/filter specific data transfer runs. The data source can use this
  method to request all scheduled transfer runs.


  Attributes:
      parent:
          Name of transfer configuration for which transfer runs should
          be retrieved. Format of transfer configuration resource name
          is: ``projects/{project_id}/transferConfigs/{config_id}``.
      states:
          When specified, only transfer runs with requested states are
          returned.
      page_token:
          Pagination token, which can be used to request a specific page
          of ``ListTransferRunsRequest`` list results. For multiple-page
          results, ``ListTransferRunsResponse`` outputs a ``next_page``
          token, which can be used as the ``page_token`` value to
          request the next page of list results.
      page_size:
          Page size. The default page size is the maximum value of 1000
          results.
      run_attempt:
          Indicates how run attempts are to be pulled.
  """,
  # @@protoc_insertion_point(class_scope:google.cloud.bigquery.datatransfer.v1.ListTransferRunsRequest)
  ))
_sym_db.RegisterMessage(ListTransferRunsRequest)

ListTransferRunsResponse = _reflection.GeneratedProtocolMessageType('ListTransferRunsResponse', (_message.Message,), dict(
  DESCRIPTOR = _LISTTRANSFERRUNSRESPONSE,
  __module__ = 'google.cloud.bigquery.datatransfer_v1.proto.datatransfer_pb2'
  ,
  __doc__ = """The returned list of pipelines in the project.


  Attributes:
      transfer_runs:
          Output only. The stored pipeline transfer runs.
      next_page_token:
          Output only. The next-pagination token. For multiple-page list
          results, this token can be used as the
          ``ListTransferRunsRequest.page_token`` to request the next
          page of list results.
  """,
  # @@protoc_insertion_point(class_scope:google.cloud.bigquery.datatransfer.v1.ListTransferRunsResponse)
  ))
_sym_db.RegisterMessage(ListTransferRunsResponse)

ListTransferLogsRequest = _reflection.GeneratedProtocolMessageType('ListTransferLogsRequest', (_message.Message,), dict(
  DESCRIPTOR = _LISTTRANSFERLOGSREQUEST,
  __module__ = 'google.cloud.bigquery.datatransfer_v1.proto.datatransfer_pb2'
  ,
  __doc__ = """A request to get user facing log messages associated with data transfer
  run.


  Attributes:
      parent:
          Transfer run name in the form: ``projects/{project_id}/transfe
          rConfigs/{config_Id}/runs/{run_id}``.
      page_token:
          Pagination token, which can be used to request a specific page
          of ``ListTransferLogsRequest`` list results. For multiple-page
          results, ``ListTransferLogsResponse`` outputs a ``next_page``
          token, which can be used as the ``page_token`` value to
          request the next page of list results.
      page_size:
          Page size. The default page size is the maximum value of 1000
          results.
      message_types:
          Message types to return. If not populated - INFO, WARNING and
          ERROR messages are returned.
  """,
  # @@protoc_insertion_point(class_scope:google.cloud.bigquery.datatransfer.v1.ListTransferLogsRequest)
  ))
_sym_db.RegisterMessage(ListTransferLogsRequest)

ListTransferLogsResponse = _reflection.GeneratedProtocolMessageType('ListTransferLogsResponse', (_message.Message,), dict(
  DESCRIPTOR = _LISTTRANSFERLOGSRESPONSE,
  __module__ = 'google.cloud.bigquery.datatransfer_v1.proto.datatransfer_pb2'
  ,
  __doc__ = """The returned list transfer run messages.


  Attributes:
      transfer_messages:
          Output only. The stored pipeline transfer messages.
      next_page_token:
          Output only. The next-pagination token. For multiple-page list
          results, this token can be used as the
          ``GetTransferRunLogRequest.page_token`` to request the next
          page of list results.
  """,
  # @@protoc_insertion_point(class_scope:google.cloud.bigquery.datatransfer.v1.ListTransferLogsResponse)
  ))
_sym_db.RegisterMessage(ListTransferLogsResponse)

CheckValidCredsRequest = _reflection.GeneratedProtocolMessageType('CheckValidCredsRequest', (_message.Message,), dict(
  DESCRIPTOR = _CHECKVALIDCREDSREQUEST,
  __module__ = 'google.cloud.bigquery.datatransfer_v1.proto.datatransfer_pb2'
  ,
  __doc__ = """A request to determine whether the user has valid credentials. This
  method is used to limit the number of OAuth popups in the user
  interface. The user id is inferred from the API call context. If the
  data source has the Google+ authorization type, this method returns
  false, as it cannot be determined whether the credentials are already
  valid merely based on the user id.


  Attributes:
      name:
          The data source in the form:
          ``projects/{project_id}/dataSources/{data_source_id}``
  """,
  # @@protoc_insertion_point(class_scope:google.cloud.bigquery.datatransfer.v1.CheckValidCredsRequest)
  ))
_sym_db.RegisterMessage(CheckValidCredsRequest)

CheckValidCredsResponse = _reflection.GeneratedProtocolMessageType('CheckValidCredsResponse', (_message.Message,), dict(
  DESCRIPTOR = _CHECKVALIDCREDSRESPONSE,
  __module__ = 'google.cloud.bigquery.datatransfer_v1.proto.datatransfer_pb2'
  ,
  __doc__ = """A response indicating whether the credentials exist and are valid.


  Attributes:
      has_valid_creds:
          If set to ``true``, the credentials exist and are valid.
  """,
  # @@protoc_insertion_point(class_scope:google.cloud.bigquery.datatransfer.v1.CheckValidCredsResponse)
  ))
_sym_db.RegisterMessage(CheckValidCredsResponse)

ScheduleTransferRunsRequest = _reflection.GeneratedProtocolMessageType('ScheduleTransferRunsRequest', (_message.Message,), dict(
  DESCRIPTOR = _SCHEDULETRANSFERRUNSREQUEST,
  __module__ = 'google.cloud.bigquery.datatransfer_v1.proto.datatransfer_pb2'
  ,
  __doc__ = """A request to schedule transfer runs for a time range.


  Attributes:
      parent:
          Transfer configuration name in the form:
          ``projects/{project_id}/transferConfigs/{config_id}``.
      start_time:
          Start time of the range of transfer runs. For example,
          ``"2017-05-25T00:00:00+00:00"``.
      end_time:
          End time of the range of transfer runs. For example,
          ``"2017-05-30T00:00:00+00:00"``.
  """,
  # @@protoc_insertion_point(class_scope:google.cloud.bigquery.datatransfer.v1.ScheduleTransferRunsRequest)
  ))
_sym_db.RegisterMessage(ScheduleTransferRunsRequest)

ScheduleTransferRunsResponse = _reflection.GeneratedProtocolMessageType('ScheduleTransferRunsResponse', (_message.Message,), dict(
  DESCRIPTOR = _SCHEDULETRANSFERRUNSRESPONSE,
  __module__ = 'google.cloud.bigquery.datatransfer_v1.proto.datatransfer_pb2'
  ,
  __doc__ = """A response to schedule transfer runs for a time range.


  Attributes:
      runs:
          The transfer runs that were scheduled.
  """,
  # @@protoc_insertion_point(class_scope:google.cloud.bigquery.datatransfer.v1.ScheduleTransferRunsResponse)
  ))
_sym_db.RegisterMessage(ScheduleTransferRunsResponse)


DESCRIPTOR.has_options = True
DESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\n)com.google.cloud.bigquery.datatransfer.v1B\021DataTransferProtoP\001ZQgoogle.golang.org/genproto/googleapis/cloud/bigquery/datatransfer/v1;datatransfer\252\002%Google.Cloud.BigQuery.DataTransfer.V1\312\002%Google\\Cloud\\BigQuery\\DataTransfer\\V1'))
try:
  # THESE ELEMENTS WILL BE DEPRECATED.
  # Please use the generated *_pb2_grpc.py files instead.
  import grpc
  from grpc.beta import implementations as beta_implementations
  from grpc.beta import interfaces as beta_interfaces
  from grpc.framework.common import cardinality
  from grpc.framework.interfaces.face import utilities as face_utilities


  class DataTransferServiceStub(object):
    """The Google BigQuery Data Transfer Service API enables BigQuery users to
    configure the transfer of their data from other Google Products into BigQuery.
    This service contains methods that are end user exposed. It backs up the
    frontend.
    """

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.GetDataSource = channel.unary_unary(
          '/google.cloud.bigquery.datatransfer.v1.DataTransferService/GetDataSource',
          request_serializer=GetDataSourceRequest.SerializeToString,
          response_deserializer=DataSource.FromString,
          )
      self.ListDataSources = channel.unary_unary(
          '/google.cloud.bigquery.datatransfer.v1.DataTransferService/ListDataSources',
          request_serializer=ListDataSourcesRequest.SerializeToString,
          response_deserializer=ListDataSourcesResponse.FromString,
          )
      self.CreateTransferConfig = channel.unary_unary(
          '/google.cloud.bigquery.datatransfer.v1.DataTransferService/CreateTransferConfig',
          request_serializer=CreateTransferConfigRequest.SerializeToString,
          response_deserializer=google_dot_cloud_dot_bigquery_dot_datatransfer__v1_dot_proto_dot_transfer__pb2.TransferConfig.FromString,
          )
      self.UpdateTransferConfig = channel.unary_unary(
          '/google.cloud.bigquery.datatransfer.v1.DataTransferService/UpdateTransferConfig',
          request_serializer=UpdateTransferConfigRequest.SerializeToString,
          response_deserializer=google_dot_cloud_dot_bigquery_dot_datatransfer__v1_dot_proto_dot_transfer__pb2.TransferConfig.FromString,
          )
      self.DeleteTransferConfig = channel.unary_unary(
          '/google.cloud.bigquery.datatransfer.v1.DataTransferService/DeleteTransferConfig',
          request_serializer=DeleteTransferConfigRequest.SerializeToString,
          response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
          )
      self.GetTransferConfig = channel.unary_unary(
          '/google.cloud.bigquery.datatransfer.v1.DataTransferService/GetTransferConfig',
          request_serializer=GetTransferConfigRequest.SerializeToString,
          response_deserializer=google_dot_cloud_dot_bigquery_dot_datatransfer__v1_dot_proto_dot_transfer__pb2.TransferConfig.FromString,
          )
      self.ListTransferConfigs = channel.unary_unary(
          '/google.cloud.bigquery.datatransfer.v1.DataTransferService/ListTransferConfigs',
          request_serializer=ListTransferConfigsRequest.SerializeToString,
          response_deserializer=ListTransferConfigsResponse.FromString,
          )
      self.ScheduleTransferRuns = channel.unary_unary(
          '/google.cloud.bigquery.datatransfer.v1.DataTransferService/ScheduleTransferRuns',
          request_serializer=ScheduleTransferRunsRequest.SerializeToString,
          response_deserializer=ScheduleTransferRunsResponse.FromString,
          )
      self.GetTransferRun = channel.unary_unary(
          '/google.cloud.bigquery.datatransfer.v1.DataTransferService/GetTransferRun',
          request_serializer=GetTransferRunRequest.SerializeToString,
          response_deserializer=google_dot_cloud_dot_bigquery_dot_datatransfer__v1_dot_proto_dot_transfer__pb2.TransferRun.FromString,
          )
      self.DeleteTransferRun = channel.unary_unary(
          '/google.cloud.bigquery.datatransfer.v1.DataTransferService/DeleteTransferRun',
          request_serializer=DeleteTransferRunRequest.SerializeToString,
          response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
          )
      self.ListTransferRuns = channel.unary_unary(
          '/google.cloud.bigquery.datatransfer.v1.DataTransferService/ListTransferRuns',
          request_serializer=ListTransferRunsRequest.SerializeToString,
          response_deserializer=ListTransferRunsResponse.FromString,
          )
      self.ListTransferLogs = channel.unary_unary(
          '/google.cloud.bigquery.datatransfer.v1.DataTransferService/ListTransferLogs',
          request_serializer=ListTransferLogsRequest.SerializeToString,
          response_deserializer=ListTransferLogsResponse.FromString,
          )
      self.CheckValidCreds = channel.unary_unary(
          '/google.cloud.bigquery.datatransfer.v1.DataTransferService/CheckValidCreds',
          request_serializer=CheckValidCredsRequest.SerializeToString,
          response_deserializer=CheckValidCredsResponse.FromString,
          )


  class DataTransferServiceServicer(object):
    """The Google BigQuery Data Transfer Service API enables BigQuery users to
    configure the transfer of their data from other Google Products into BigQuery.
    This service contains methods that are end user exposed. It backs up the
    frontend.
    """

    def GetDataSource(self, request, context):
      """Retrieves a supported data source and returns its settings,
      which can be used for UI rendering.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def ListDataSources(self, request, context):
      """Lists supported data sources and returns their settings,
      which can be used for UI rendering.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def CreateTransferConfig(self, request, context):
      """Creates a new data transfer configuration.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def UpdateTransferConfig(self, request, context):
      """Updates a data transfer configuration.
      All fields must be set, even if they are not updated.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def DeleteTransferConfig(self, request, context):
      """Deletes a data transfer configuration,
      including any associated transfer runs and logs.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def GetTransferConfig(self, request, context):
      """Returns information about a data transfer config.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def ListTransferConfigs(self, request, context):
      """Returns information about all data transfers in the project.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def ScheduleTransferRuns(self, request, context):
      """Creates transfer runs for a time range [range_start_time, range_end_time].
      For each date - or whatever granularity the data source supports - in the
      range, one transfer run is created.
      Note that runs are created per UTC time in the time range.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def GetTransferRun(self, request, context):
      """Returns information about the particular transfer run.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def DeleteTransferRun(self, request, context):
      """Deletes the specified transfer run.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def ListTransferRuns(self, request, context):
      """Returns information about running and completed jobs.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def ListTransferLogs(self, request, context):
      """Returns user facing log messages for the data transfer run.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def CheckValidCreds(self, request, context):
      """Returns true if valid credentials exist for the given data source and
      requesting user.
      Some data sources doesn't support service account, so we need to talk to
      them on behalf of the end user. This API just checks whether we have OAuth
      token for the particular user, which is a pre-requisite before user can
      create a transfer config.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_DataTransferServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'GetDataSource': grpc.unary_unary_rpc_method_handler(
            servicer.GetDataSource,
            request_deserializer=GetDataSourceRequest.FromString,
            response_serializer=DataSource.SerializeToString,
        ),
        'ListDataSources': grpc.unary_unary_rpc_method_handler(
            servicer.ListDataSources,
            request_deserializer=ListDataSourcesRequest.FromString,
            response_serializer=ListDataSourcesResponse.SerializeToString,
        ),
        'CreateTransferConfig': grpc.unary_unary_rpc_method_handler(
            servicer.CreateTransferConfig,
            request_deserializer=CreateTransferConfigRequest.FromString,
            response_serializer=google_dot_cloud_dot_bigquery_dot_datatransfer__v1_dot_proto_dot_transfer__pb2.TransferConfig.SerializeToString,
        ),
        'UpdateTransferConfig': grpc.unary_unary_rpc_method_handler(
            servicer.UpdateTransferConfig,
            request_deserializer=UpdateTransferConfigRequest.FromString,
            response_serializer=google_dot_cloud_dot_bigquery_dot_datatransfer__v1_dot_proto_dot_transfer__pb2.TransferConfig.SerializeToString,
        ),
        'DeleteTransferConfig': grpc.unary_unary_rpc_method_handler(
            servicer.DeleteTransferConfig,
            request_deserializer=DeleteTransferConfigRequest.FromString,
            response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
        ),
        'GetTransferConfig': grpc.unary_unary_rpc_method_handler(
            servicer.GetTransferConfig,
            request_deserializer=GetTransferConfigRequest.FromString,
            response_serializer=google_dot_cloud_dot_bigquery_dot_datatransfer__v1_dot_proto_dot_transfer__pb2.TransferConfig.SerializeToString,
        ),
        'ListTransferConfigs': grpc.unary_unary_rpc_method_handler(
            servicer.ListTransferConfigs,
            request_deserializer=ListTransferConfigsRequest.FromString,
            response_serializer=ListTransferConfigsResponse.SerializeToString,
        ),
        'ScheduleTransferRuns': grpc.unary_unary_rpc_method_handler(
            servicer.ScheduleTransferRuns,
            request_deserializer=ScheduleTransferRunsRequest.FromString,
            response_serializer=ScheduleTransferRunsResponse.SerializeToString,
        ),
        'GetTransferRun': grpc.unary_unary_rpc_method_handler(
            servicer.GetTransferRun,
            request_deserializer=GetTransferRunRequest.FromString,
            response_serializer=google_dot_cloud_dot_bigquery_dot_datatransfer__v1_dot_proto_dot_transfer__pb2.TransferRun.SerializeToString,
        ),
        'DeleteTransferRun': grpc.unary_unary_rpc_method_handler(
            servicer.DeleteTransferRun,
            request_deserializer=DeleteTransferRunRequest.FromString,
            response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
        ),
        'ListTransferRuns': grpc.unary_unary_rpc_method_handler(
            servicer.ListTransferRuns,
            request_deserializer=ListTransferRunsRequest.FromString,
            response_serializer=ListTransferRunsResponse.SerializeToString,
        ),
        'ListTransferLogs': grpc.unary_unary_rpc_method_handler(
            servicer.ListTransferLogs,
            request_deserializer=ListTransferLogsRequest.FromString,
            response_serializer=ListTransferLogsResponse.SerializeToString,
        ),
        'CheckValidCreds': grpc.unary_unary_rpc_method_handler(
            servicer.CheckValidCreds,
            request_deserializer=CheckValidCredsRequest.FromString,
            response_serializer=CheckValidCredsResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'google.cloud.bigquery.datatransfer.v1.DataTransferService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class BetaDataTransferServiceServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """The Google BigQuery Data Transfer Service API enables BigQuery users to
    configure the transfer of their data from other Google Products into BigQuery.
    This service contains methods that are end user exposed. It backs up the
    frontend.
    """
    def GetDataSource(self, request, context):
      """Retrieves a supported data source and returns its settings,
      which can be used for UI rendering.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def ListDataSources(self, request, context):
      """Lists supported data sources and returns their settings,
      which can be used for UI rendering.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def CreateTransferConfig(self, request, context):
      """Creates a new data transfer configuration.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def UpdateTransferConfig(self, request, context):
      """Updates a data transfer configuration.
      All fields must be set, even if they are not updated.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def DeleteTransferConfig(self, request, context):
      """Deletes a data transfer configuration,
      including any associated transfer runs and logs.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def GetTransferConfig(self, request, context):
      """Returns information about a data transfer config.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def ListTransferConfigs(self, request, context):
      """Returns information about all data transfers in the project.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def ScheduleTransferRuns(self, request, context):
      """Creates transfer runs for a time range [range_start_time, range_end_time].
      For each date - or whatever granularity the data source supports - in the
      range, one transfer run is created.
      Note that runs are created per UTC time in the time range.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def GetTransferRun(self, request, context):
      """Returns information about the particular transfer run.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def DeleteTransferRun(self, request, context):
      """Deletes the specified transfer run.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def ListTransferRuns(self, request, context):
      """Returns information about running and completed jobs.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def ListTransferLogs(self, request, context):
      """Returns user facing log messages for the data transfer run.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def CheckValidCreds(self, request, context):
      """Returns true if valid credentials exist for the given data source and
      requesting user.
      Some data sources doesn't support service account, so we need to talk to
      them on behalf of the end user. This API just checks whether we have OAuth
      token for the particular user, which is a pre-requisite before user can
      create a transfer config.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaDataTransferServiceStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """The Google BigQuery Data Transfer Service API enables BigQuery users to
    configure the transfer of their data from other Google Products into BigQuery.
    This service contains methods that are end user exposed. It backs up the
    frontend.
    """
    def GetDataSource(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Retrieves a supported data source and returns its settings,
      which can be used for UI rendering.
      """
      raise NotImplementedError()
    GetDataSource.future = None
    def ListDataSources(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Lists supported data sources and returns their settings,
      which can be used for UI rendering.
      """
      raise NotImplementedError()
    ListDataSources.future = None
    def CreateTransferConfig(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Creates a new data transfer configuration.
      """
      raise NotImplementedError()
    CreateTransferConfig.future = None
    def UpdateTransferConfig(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Updates a data transfer configuration.
      All fields must be set, even if they are not updated.
      """
      raise NotImplementedError()
    UpdateTransferConfig.future = None
    def DeleteTransferConfig(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Deletes a data transfer configuration,
      including any associated transfer runs and logs.
      """
      raise NotImplementedError()
    DeleteTransferConfig.future = None
    def GetTransferConfig(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Returns information about a data transfer config.
      """
      raise NotImplementedError()
    GetTransferConfig.future = None
    def ListTransferConfigs(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Returns information about all data transfers in the project.
      """
      raise NotImplementedError()
    ListTransferConfigs.future = None
    def ScheduleTransferRuns(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Creates transfer runs for a time range [range_start_time, range_end_time].
      For each date - or whatever granularity the data source supports - in the
      range, one transfer run is created.
      Note that runs are created per UTC time in the time range.
      """
      raise NotImplementedError()
    ScheduleTransferRuns.future = None
    def GetTransferRun(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Returns information about the particular transfer run.
      """
      raise NotImplementedError()
    GetTransferRun.future = None
    def DeleteTransferRun(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Deletes the specified transfer run.
      """
      raise NotImplementedError()
    DeleteTransferRun.future = None
    def ListTransferRuns(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Returns information about running and completed jobs.
      """
      raise NotImplementedError()
    ListTransferRuns.future = None
    def ListTransferLogs(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Returns user facing log messages for the data transfer run.
      """
      raise NotImplementedError()
    ListTransferLogs.future = None
    def CheckValidCreds(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Returns true if valid credentials exist for the given data source and
      requesting user.
      Some data sources doesn't support service account, so we need to talk to
      them on behalf of the end user. This API just checks whether we have OAuth
      token for the particular user, which is a pre-requisite before user can
      create a transfer config.
      """
      raise NotImplementedError()
    CheckValidCreds.future = None


  def beta_create_DataTransferService_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('google.cloud.bigquery.datatransfer.v1.DataTransferService', 'CheckValidCreds'): CheckValidCredsRequest.FromString,
      ('google.cloud.bigquery.datatransfer.v1.DataTransferService', 'CreateTransferConfig'): CreateTransferConfigRequest.FromString,
      ('google.cloud.bigquery.datatransfer.v1.DataTransferService', 'DeleteTransferConfig'): DeleteTransferConfigRequest.FromString,
      ('google.cloud.bigquery.datatransfer.v1.DataTransferService', 'DeleteTransferRun'): DeleteTransferRunRequest.FromString,
      ('google.cloud.bigquery.datatransfer.v1.DataTransferService', 'GetDataSource'): GetDataSourceRequest.FromString,
      ('google.cloud.bigquery.datatransfer.v1.DataTransferService', 'GetTransferConfig'): GetTransferConfigRequest.FromString,
      ('google.cloud.bigquery.datatransfer.v1.DataTransferService', 'GetTransferRun'): GetTransferRunRequest.FromString,
      ('google.cloud.bigquery.datatransfer.v1.DataTransferService', 'ListDataSources'): ListDataSourcesRequest.FromString,
      ('google.cloud.bigquery.datatransfer.v1.DataTransferService', 'ListTransferConfigs'): ListTransferConfigsRequest.FromString,
      ('google.cloud.bigquery.datatransfer.v1.DataTransferService', 'ListTransferLogs'): ListTransferLogsRequest.FromString,
      ('google.cloud.bigquery.datatransfer.v1.DataTransferService', 'ListTransferRuns'): ListTransferRunsRequest.FromString,
      ('google.cloud.bigquery.datatransfer.v1.DataTransferService', 'ScheduleTransferRuns'): ScheduleTransferRunsRequest.FromString,
      ('google.cloud.bigquery.datatransfer.v1.DataTransferService', 'UpdateTransferConfig'): UpdateTransferConfigRequest.FromString,
    }
    response_serializers = {
      ('google.cloud.bigquery.datatransfer.v1.DataTransferService', 'CheckValidCreds'): CheckValidCredsResponse.SerializeToString,
      ('google.cloud.bigquery.datatransfer.v1.DataTransferService', 'CreateTransferConfig'): google_dot_cloud_dot_bigquery_dot_datatransfer__v1_dot_proto_dot_transfer__pb2.TransferConfig.SerializeToString,
      ('google.cloud.bigquery.datatransfer.v1.DataTransferService', 'DeleteTransferConfig'): google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
      ('google.cloud.bigquery.datatransfer.v1.DataTransferService', 'DeleteTransferRun'): google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
      ('google.cloud.bigquery.datatransfer.v1.DataTransferService', 'GetDataSource'): DataSource.SerializeToString,
      ('google.cloud.bigquery.datatransfer.v1.DataTransferService', 'GetTransferConfig'): google_dot_cloud_dot_bigquery_dot_datatransfer__v1_dot_proto_dot_transfer__pb2.TransferConfig.SerializeToString,
      ('google.cloud.bigquery.datatransfer.v1.DataTransferService', 'GetTransferRun'): google_dot_cloud_dot_bigquery_dot_datatransfer__v1_dot_proto_dot_transfer__pb2.TransferRun.SerializeToString,
      ('google.cloud.bigquery.datatransfer.v1.DataTransferService', 'ListDataSources'): ListDataSourcesResponse.SerializeToString,
      ('google.cloud.bigquery.datatransfer.v1.DataTransferService', 'ListTransferConfigs'): ListTransferConfigsResponse.SerializeToString,
      ('google.cloud.bigquery.datatransfer.v1.DataTransferService', 'ListTransferLogs'): ListTransferLogsResponse.SerializeToString,
      ('google.cloud.bigquery.datatransfer.v1.DataTransferService', 'ListTransferRuns'): ListTransferRunsResponse.SerializeToString,
      ('google.cloud.bigquery.datatransfer.v1.DataTransferService', 'ScheduleTransferRuns'): ScheduleTransferRunsResponse.SerializeToString,
      ('google.cloud.bigquery.datatransfer.v1.DataTransferService', 'UpdateTransferConfig'): google_dot_cloud_dot_bigquery_dot_datatransfer__v1_dot_proto_dot_transfer__pb2.TransferConfig.SerializeToString,
    }
    method_implementations = {
      ('google.cloud.bigquery.datatransfer.v1.DataTransferService', 'CheckValidCreds'): face_utilities.unary_unary_inline(servicer.CheckValidCreds),
      ('google.cloud.bigquery.datatransfer.v1.DataTransferService', 'CreateTransferConfig'): face_utilities.unary_unary_inline(servicer.CreateTransferConfig),
      ('google.cloud.bigquery.datatransfer.v1.DataTransferService', 'DeleteTransferConfig'): face_utilities.unary_unary_inline(servicer.DeleteTransferConfig),
      ('google.cloud.bigquery.datatransfer.v1.DataTransferService', 'DeleteTransferRun'): face_utilities.unary_unary_inline(servicer.DeleteTransferRun),
      ('google.cloud.bigquery.datatransfer.v1.DataTransferService', 'GetDataSource'): face_utilities.unary_unary_inline(servicer.GetDataSource),
      ('google.cloud.bigquery.datatransfer.v1.DataTransferService', 'GetTransferConfig'): face_utilities.unary_unary_inline(servicer.GetTransferConfig),
      ('google.cloud.bigquery.datatransfer.v1.DataTransferService', 'GetTransferRun'): face_utilities.unary_unary_inline(servicer.GetTransferRun),
      ('google.cloud.bigquery.datatransfer.v1.DataTransferService', 'ListDataSources'): face_utilities.unary_unary_inline(servicer.ListDataSources),
      ('google.cloud.bigquery.datatransfer.v1.DataTransferService', 'ListTransferConfigs'): face_utilities.unary_unary_inline(servicer.ListTransferConfigs),
      ('google.cloud.bigquery.datatransfer.v1.DataTransferService', 'ListTransferLogs'): face_utilities.unary_unary_inline(servicer.ListTransferLogs),
      ('google.cloud.bigquery.datatransfer.v1.DataTransferService', 'ListTransferRuns'): face_utilities.unary_unary_inline(servicer.ListTransferRuns),
      ('google.cloud.bigquery.datatransfer.v1.DataTransferService', 'ScheduleTransferRuns'): face_utilities.unary_unary_inline(servicer.ScheduleTransferRuns),
      ('google.cloud.bigquery.datatransfer.v1.DataTransferService', 'UpdateTransferConfig'): face_utilities.unary_unary_inline(servicer.UpdateTransferConfig),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_DataTransferService_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('google.cloud.bigquery.datatransfer.v1.DataTransferService', 'CheckValidCreds'): CheckValidCredsRequest.SerializeToString,
      ('google.cloud.bigquery.datatransfer.v1.DataTransferService', 'CreateTransferConfig'): CreateTransferConfigRequest.SerializeToString,
      ('google.cloud.bigquery.datatransfer.v1.DataTransferService', 'DeleteTransferConfig'): DeleteTransferConfigRequest.SerializeToString,
      ('google.cloud.bigquery.datatransfer.v1.DataTransferService', 'DeleteTransferRun'): DeleteTransferRunRequest.SerializeToString,
      ('google.cloud.bigquery.datatransfer.v1.DataTransferService', 'GetDataSource'): GetDataSourceRequest.SerializeToString,
      ('google.cloud.bigquery.datatransfer.v1.DataTransferService', 'GetTransferConfig'): GetTransferConfigRequest.SerializeToString,
      ('google.cloud.bigquery.datatransfer.v1.DataTransferService', 'GetTransferRun'): GetTransferRunRequest.SerializeToString,
      ('google.cloud.bigquery.datatransfer.v1.DataTransferService', 'ListDataSources'): ListDataSourcesRequest.SerializeToString,
      ('google.cloud.bigquery.datatransfer.v1.DataTransferService', 'ListTransferConfigs'): ListTransferConfigsRequest.SerializeToString,
      ('google.cloud.bigquery.datatransfer.v1.DataTransferService', 'ListTransferLogs'): ListTransferLogsRequest.SerializeToString,
      ('google.cloud.bigquery.datatransfer.v1.DataTransferService', 'ListTransferRuns'): ListTransferRunsRequest.SerializeToString,
      ('google.cloud.bigquery.datatransfer.v1.DataTransferService', 'ScheduleTransferRuns'): ScheduleTransferRunsRequest.SerializeToString,
      ('google.cloud.bigquery.datatransfer.v1.DataTransferService', 'UpdateTransferConfig'): UpdateTransferConfigRequest.SerializeToString,
    }
    response_deserializers = {
      ('google.cloud.bigquery.datatransfer.v1.DataTransferService', 'CheckValidCreds'): CheckValidCredsResponse.FromString,
      ('google.cloud.bigquery.datatransfer.v1.DataTransferService', 'CreateTransferConfig'): google_dot_cloud_dot_bigquery_dot_datatransfer__v1_dot_proto_dot_transfer__pb2.TransferConfig.FromString,
      ('google.cloud.bigquery.datatransfer.v1.DataTransferService', 'DeleteTransferConfig'): google_dot_protobuf_dot_empty__pb2.Empty.FromString,
      ('google.cloud.bigquery.datatransfer.v1.DataTransferService', 'DeleteTransferRun'): google_dot_protobuf_dot_empty__pb2.Empty.FromString,
      ('google.cloud.bigquery.datatransfer.v1.DataTransferService', 'GetDataSource'): DataSource.FromString,
      ('google.cloud.bigquery.datatransfer.v1.DataTransferService', 'GetTransferConfig'): google_dot_cloud_dot_bigquery_dot_datatransfer__v1_dot_proto_dot_transfer__pb2.TransferConfig.FromString,
      ('google.cloud.bigquery.datatransfer.v1.DataTransferService', 'GetTransferRun'): google_dot_cloud_dot_bigquery_dot_datatransfer__v1_dot_proto_dot_transfer__pb2.TransferRun.FromString,
      ('google.cloud.bigquery.datatransfer.v1.DataTransferService', 'ListDataSources'): ListDataSourcesResponse.FromString,
      ('google.cloud.bigquery.datatransfer.v1.DataTransferService', 'ListTransferConfigs'): ListTransferConfigsResponse.FromString,
      ('google.cloud.bigquery.datatransfer.v1.DataTransferService', 'ListTransferLogs'): ListTransferLogsResponse.FromString,
      ('google.cloud.bigquery.datatransfer.v1.DataTransferService', 'ListTransferRuns'): ListTransferRunsResponse.FromString,
      ('google.cloud.bigquery.datatransfer.v1.DataTransferService', 'ScheduleTransferRuns'): ScheduleTransferRunsResponse.FromString,
      ('google.cloud.bigquery.datatransfer.v1.DataTransferService', 'UpdateTransferConfig'): google_dot_cloud_dot_bigquery_dot_datatransfer__v1_dot_proto_dot_transfer__pb2.TransferConfig.FromString,
    }
    cardinalities = {
      'CheckValidCreds': cardinality.Cardinality.UNARY_UNARY,
      'CreateTransferConfig': cardinality.Cardinality.UNARY_UNARY,
      'DeleteTransferConfig': cardinality.Cardinality.UNARY_UNARY,
      'DeleteTransferRun': cardinality.Cardinality.UNARY_UNARY,
      'GetDataSource': cardinality.Cardinality.UNARY_UNARY,
      'GetTransferConfig': cardinality.Cardinality.UNARY_UNARY,
      'GetTransferRun': cardinality.Cardinality.UNARY_UNARY,
      'ListDataSources': cardinality.Cardinality.UNARY_UNARY,
      'ListTransferConfigs': cardinality.Cardinality.UNARY_UNARY,
      'ListTransferLogs': cardinality.Cardinality.UNARY_UNARY,
      'ListTransferRuns': cardinality.Cardinality.UNARY_UNARY,
      'ScheduleTransferRuns': cardinality.Cardinality.UNARY_UNARY,
      'UpdateTransferConfig': cardinality.Cardinality.UNARY_UNARY,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'google.cloud.bigquery.datatransfer.v1.DataTransferService', cardinalities, options=stub_options)
except ImportError:
  pass
# @@protoc_insertion_point(module_scope)
